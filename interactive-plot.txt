-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Quick time series plotting meant to be used interactively in ghci
--   
--   Please see the README on GitHub at
--   <a>https://github.com/mstksg/interactive-plot#readme</a>
@package interactive-plot
@version 0.1.0.0

module Interactive.Plot.Core
data Coord a
C :: a -> a -> Coord a
[cX] :: Coord a -> a
[cY] :: Coord a -> a
data Range a
R :: a -> a -> Range a
[rMin] :: Range a -> a
[rMax] :: Range a -> a
data PointStyle
PointStyle :: Char -> Color -> PointStyle
[psMarker] :: PointStyle -> Char
[psColor] :: PointStyle -> Color
data Series
Series :: [Coord Double] -> PointStyle -> Series
[sItems] :: Series -> [Coord Double]
[sStyle] :: Series -> PointStyle
data Alignment
ALeft :: Alignment
ACenter :: Alignment
ARight :: Alignment
data PlotOpts
PO :: Double -> Maybe Double -> Maybe (Range Double) -> Maybe (Range Double) -> PlotOpts

-- | character width ratio of terminal (H/W)
[poTermRatio] :: PlotOpts -> Double

-- | plot aspect ratio (H/W)
[poAspectRatio] :: PlotOpts -> Maybe Double
[poXRange] :: PlotOpts -> Maybe (Range Double)
[poYRange] :: PlotOpts -> Maybe (Range Double)
renderPlot :: Coord (Range Int) -> Coord (Range Double) -> [Series] -> [Image]
scaleRange :: Fractional a => a -> Range a -> Range a
rSize :: Num a => Range a -> a
newtype OrdColor
OC :: Color -> OrdColor
[getOC] :: OrdColor -> Color
plotRange :: PlotOpts -> Coord (Range Int) -> [Series] -> Coord (Range Double)
instance GHC.Classes.Eq Interactive.Plot.Core.PointStyle
instance Data.Foldable.Foldable Interactive.Plot.Core.Range
instance GHC.Base.Functor Interactive.Plot.Core.Range
instance GHC.Show.Show a => GHC.Show.Show (Interactive.Plot.Core.Range a)
instance Data.Foldable.Foldable Interactive.Plot.Core.Coord
instance GHC.Base.Functor Interactive.Plot.Core.Coord
instance GHC.Show.Show a => GHC.Show.Show (Interactive.Plot.Core.Coord a)
instance GHC.Classes.Eq Interactive.Plot.Core.OrdColor
instance Data.Default.Class.Default Interactive.Plot.Core.PlotOpts
instance GHC.Classes.Ord Interactive.Plot.Core.PointStyle
instance GHC.Base.Applicative Interactive.Plot.Core.Range
instance GHC.Num.Num a => GHC.Num.Num (Interactive.Plot.Core.Coord a)
instance GHC.Base.Applicative Interactive.Plot.Core.Coord
instance GHC.Classes.Ord Interactive.Plot.Core.OrdColor

module Interactive.Plot.Series
data AutoPointStyle
APS :: Maybe Char -> Maybe Color -> AutoPointStyle
[apsMarker] :: AutoPointStyle -> Maybe Char
[apsColor] :: AutoPointStyle -> Maybe Color
data AutoSeries
AS :: [Coord Double] -> AutoPointStyle -> AutoSeries
[asItems] :: AutoSeries -> [Coord Double]
[asStyle] :: AutoSeries -> AutoPointStyle
defaultStyles :: Set PointStyle
fromAutoSeries :: [AutoSeries] -> [Series]
listSeries :: [Double] -> AutoPointStyle -> AutoSeries
tupleSeries :: [(Double, Double)] -> AutoPointStyle -> AutoSeries
autoSeries :: Series -> AutoSeries
funcSeries :: (Double -> Double) -> [Double] -> AutoPointStyle -> AutoSeries
enumRange :: Int -> Range Double -> [Double]
instance GHC.Show.Show Interactive.Plot.Series.AutoSeries
instance GHC.Show.Show Interactive.Plot.Series.AutoPointStyle
instance Data.Default.Class.Default Interactive.Plot.Series.AutoPointStyle

module Interactive.Plot.Run
runPlot :: PlotOpts -> [Series] -> IO ()
runPlotAuto :: PlotOpts -> [AutoSeries] -> IO ()

module Interactive.Plot

-- | A class for types with a default value.
class Default a

-- | The default value for this type.
def :: Default a => a
